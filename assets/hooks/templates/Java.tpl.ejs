// WANING: Do not edit this file. All changes will be lost.

package io.github.airamrguez.plugins.realm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
<%
packages.forEach(function(package) {
-%>
import <%- package %>;
<%
});
-%>
import io.realm.RealmObject;
import io.realm.annotations.RealmClass;

@RealmClass
public class <%- schema.name %> extends RealmObject {
    public <%- schema.name %>() {}
<%
var properties = schema.properties;
Object.keys(properties).forEach(function(propName) {
var propValue = properties[propName];
var propType = javaType(propValue);
var capitalizedPropName = capitalize(propName);
%>
    <%- getTagForProperty(schema, propName, propValue) %>
    private <%- propType %> <%- propName %>;

    public void set<%- capitalizedPropName %>(<%- propType %> <%= propName %>) {
      this.<%- propName %> = <%- propName %>;
    }
    public <%- propType %> get<%- capitalizedPropName %>() {
      return <%- propName %>;
    }
<%
});
-%>

    public static Gson createSerializer() throws ClassNotFoundException {
        return new GsonBuilder()
  <%
      var depNames = [schema.name].concat(getSchemaDependencies(schema.name));
      depNames.forEach(function(serializer) {
        var serializerName = capitalize(serializer);
  -%>
            .registerTypeAdapter(Class.forName("io.realm.<%- serializerName %>RealmProxy"), new <%- serializerName %>Serializer())
  <%
      });
  -%>
            .serializeNulls()
            .create();
    }
}
